module GitHub.Enum.RepositoryVulnerabilityAlertState exposing (RepositoryVulnerabilityAlertState(..), all, decoder, encode)

{-| 
@docs encode, decoder, all, RepositoryVulnerabilityAlertState
-}


import Json.Decode
import Json.Encode


type RepositoryVulnerabilityAlertState
    = OPEN
    | FIXED
    | DISMISSED


all : List RepositoryVulnerabilityAlertState
all =
    [ OPEN, FIXED, DISMISSED ]


decoder : Json.Decode.Decoder RepositoryVulnerabilityAlertState
decoder =
    Json.Decode.andThen
        (\andThenUnpack ->
            \string ->
                case string of
                    "OPEN" ->
                        Json.Decode.succeed OPEN

                    "FIXED" ->
                        Json.Decode.succeed FIXED

                    "DISMISSED" ->
                        Json.Decode.succeed DISMISSED

                    _ ->
                        Json.Decode.fail "Invalid type"
        )
        Json.Decode.string


encode : RepositoryVulnerabilityAlertState -> Json.Encode.Value
encode val =
    case val of
        OPEN ->
            Json.Encode.string "OPEN"

        FIXED ->
            Json.Encode.string "FIXED"

        DISMISSED ->
            Json.Encode.string "DISMISSED"


