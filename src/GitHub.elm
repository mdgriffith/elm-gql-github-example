module GitHub exposing
    ( query, Query
    , mutation, Mutation
    , map2, map, batch
    , x509certificate, X509Certificate(..), uri, URI(..), preciseDateTime, PreciseDateTime(..), id, ID(..), html, HTML(..), gitTimestamp, GitTimestamp(..), gitSSHRemote, GitSSHRemote(..), gitObjectID, GitObjectID(..), dateTime, DateTime(..), date, Date(..), base64String, Base64String(..)
    )

{-| This is a file generated by `elm-gql` when you ran `elm-gql init`!

It's yours now to do whatever you want with.

This file does include decoders and encoders for all the Scalars for your GQL endpoint. You'll need to make sure they are implemented correctly.


## Queries

@docs query, Query


## Mutations

@docs mutation, Mutation


## Batching and Mapping

@docs map2, map, batch


## Scalar Decoders and Encoders

@docs x509certificate, X509Certificate, uri, URI, preciseDateTime, PreciseDateTime, id, ID, html, HTML, gitTimestamp, GitTimestamp, gitSSHRemote, GitSSHRemote, gitObjectID, GitObjectID, dateTime, DateTime, date, Date, base64String, Base64String

-}

import GraphQL.Engine
import Http
import Json.Decode
import Json.Encode


type alias Query data =
    GraphQL.Engine.Selection GraphQL.Engine.Query data


type alias Mutation data =
    GraphQL.Engine.Selection GraphQL.Engine.Mutation data


query :
    Query data
    ->
        { headers : List Http.Header
        , url : String
        , timeout : Maybe Float
        , tracker : Maybe String
        }
    -> Cmd (Result GraphQL.Engine.Error data)
query sel options =
    GraphQL.Engine.query sel options


mutation :
    Mutation data
    ->
        { headers : List Http.Header
        , url : String
        , timeout : Maybe Float
        , tracker : Maybe String
        }
    -> Cmd (Result GraphQL.Engine.Error data)
mutation sel options =
    GraphQL.Engine.mutation sel options


batch : List (Selection source data) -> Selection source (List data)
batch =
    GraphQL.Engine.batch


map : (a -> b) -> Selection source a -> Selection source b
map =
    GraphQL.Engine.map


map2 :
    (a -> b -> c)
    -> Selection source a
    -> Selection source b
    -> Selection source c
map2 =
    GraphQL.Engine.map2


type alias Codec scalar =
    { encode : scalar -> Json.Encode.Value
    , decoder : Json.Decode.Decoder scalar
    }


type Base64String
    = Base64String String


base64String : Codec Base64String
base64String =
    { encode =
        \val ->
            case val of
                Base64String str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map Base64String Json.Decode.string
    }


type Date
    = Date String


date : Codec Date
date =
    { encode =
        \val ->
            case val of
                Date str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map Date Json.Decode.string
    }


type DateTime
    = DateTime String


dateTime : Codec DateTime
dateTime =
    { encode =
        \val ->
            case val of
                DateTime str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map DateTime Json.Decode.string
    }


type GitObjectID
    = GitObjectID String


gitObjectID : Codec GitObjectID
gitObjectID =
    { encode =
        \val ->
            case val of
                GitObjectID str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map GitObjectID Json.Decode.string
    }


type GitSSHRemote
    = GitSSHRemote String


gitSSHRemote : Codec GitSSHRemote
gitSSHRemote =
    { encode =
        \val ->
            case val of
                GitSSHRemote str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map GitSSHRemote Json.Decode.string
    }


type GitTimestamp
    = GitTimestamp String


gitTimestamp : Codec GitTimestamp
gitTimestamp =
    { encode =
        \val ->
            case val of
                GitTimestamp str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map GitTimestamp Json.Decode.string
    }


type HTML
    = HTML String


html : Codec HTML
html =
    { encode =
        \val ->
            case val of
                HTML str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map HTML Json.Decode.string
    }


type ID
    = ID String


id : Codec ID
id =
    { encode =
        \val ->
            case val of
                ID str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map ID Json.Decode.string
    }


type PreciseDateTime
    = PreciseDateTime String


preciseDateTime : Codec PreciseDateTime
preciseDateTime =
    { encode =
        \val ->
            case val of
                PreciseDateTime str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map PreciseDateTime Json.Decode.string
    }


type URI
    = URI String


uri : Codec URI
uri =
    { encode =
        \val ->
            case val of
                URI str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map URI Json.Decode.string
    }


type X509Certificate
    = X509Certificate String


x509certificate : Codec X509Certificate
x509certificate =
    { encode =
        \val ->
            case val of
                X509Certificate str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map X509Certificate Json.Decode.string
    }
